#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+BEAMER_HEADER:\setbeamertemplate{items}[circle]
#+LATEX_HEADER:\newcommand{\labelitemi}{$\bullet$}
#+LATEX_HEADER:\newcommand{\labelitemii}{$\circ$}
# #+BEAMER_HEADER:\setbeamertemplate{itemize items}[ball]
#+LATEX_HEADER:\usepackage{enumitem}
# #+LATEX_HEADER:\usepackage{algcompatible}
#+LATEX_HEADER:\usepackage{helvet}
# #+LATEX_HEADER:\usepackage{tgadventor}
# #+LATEX_HEADER:\lstdefinelanguage{yaml}{keywords={true,false,null,y,n},keywordstyle=\color{darkgray}\bfseries\tiny,ndkeywords={},ndkeywordstyle=\color{black}\bfseries\tiny,identifierstyle=\color{black},sensitive=false,comment=[l]{#},morecomment=[s]{/*}{*/},commentstyle=\color{purple}\ttfamily,stringstyle=\color{blue}\ttfamily,morestring=[b]',morestring=[b]"p}
#+LATEX_HEADER:\lstdefinelanguage{yaml}{basicstyle=\ttfamily\tiny,frame=tblr,framerule=.2pt,framexleftmargin=1pt,showstringspaces=false,escapechar=\@}
#+OPTIONS: H:1 toc:nil num:nil author:t *:t

#+TITLE: A Multi-cluster service mesh east-west gateway for SD-WAN
#+AUTHOR: BME + Cisco

* Goals

- build an *east-west (EW) gateway* to seamlessly *interconnect two or more service-mesh clusters
  over an SD-WAN fabric* for a consistent end-to-end user experience
- integrate the *L4/L7 traffic management policies* on the service-mesh side with the *L3/L4
  policies* on the SD-WAN interconnect
- end-to-end *observability and the security* across the service mesh and the SD-WAN segments

#+ATTR_LATEX: :placement [t] :width 340pt
[[./multi-cluster-service-mesh-ew-gateway-reference-arch-crop.pdf]]

* User stories

- *integrated SD-WAN policies:* the service owner wants all accesses to the =payment.secure= HTTP
  service (port 8080) to be mapped to the high-prio SD-WAN tunnel
- *L7 traffic management:* same, but now only GET queries should map to the high-prio tunnel
- *resiliency:* automatic failover between SD-WAN tunnels
- *monitoring:* end-to-end observability

* Principles

- we **assign a separate HTTP port with each SD-WAN tunnel** to make sure that EW traffic can
  actually be classified by the SD-WAN in order to apply the proper SD-WAN prio
- we **enforce the L4/L7 traffic management policies and SD-WAN priorities on the egress EW
  gateway**, the ingress EW gateway merely proxies the service traffic to the corresponding
  endpoints in the cluster
- we **reuse official Kubernetes APIs**, namely the
  [[https://github.com/kubernetes/enhancements/tree/master/keps/sig-multicluster/1645-multi-cluster-services-api][Multi-cluster
  Services API (KEP-1645)]] for service export/import and the
  [[https://gateway-api.sigs.k8s.io][Kubernetes Gateway API]] for L4/L7 policies
- we **implement the whole thing on top of a standard
  [[https://gateway-api.sigs.k8s.io/implementations][Kubernetes gateway implementation]]**

* Service exports

- services have to be explicitly exported from the hosting cluster to allow access from other
  clusters
  #+BEGIN_SRC yaml
  apiVersion: mc-wan.l7mp.io/v1alpha1
  kind: ServiceExport
  metadata:
    name: payment
    namespace: secure
  spec:
    http:
      rules:
        - matches:
            - method: GET
              path: { type: PathPrefix, value: /payment }
          backendRefs:
            group: mc-wan.l7mp.io
            kind: WANPolicy
            name: sd-wan-priority-high
        - matches:
            - path: { type: PathPrefix, value: /stats }
          backendRefs:
            group: mc-wan.l7mp.io
            kind: WANPolicy
            name: sd-wan-priority-low
  #+END_SRC
- service exports consist of 2 parts: the L4/L7 policies at the ingress side plus the SD-WAN
  priority to apply to matching traffic

* Service imports and WAN policies

- exported services are automatically imported into all clusters in which the service's namespace
  exists (including the exporting cluster)
- ServiceImport CRDs are automatically created by the controller
- service exports and imports can associate the requested WAN policy for a service
  #+BEGIN_SRC yaml
  apiVersion: mc-wan.l7mp.io/v1alpha1
  kind: WANPolicy
  metadata:
    name: sd-wan-priority-high
  spec:
    tunnel: business
    port: 31111
  #+END_SRC

* Mechanics

- the spec contains a description of how to map the above CRDs to actual Kubernetes APIs:
  [[https://github.com/l7mp/mc-wan][https://github.com/l7mp/mc-wan]]
  #+BEGIN_SRC yaml
   apiVersion: gateway.networking.k8s.io/v1beta1
   kind: HTTPRoute
   metadata: { name: payment-secure, namespace: mc-wan }
   spec:
     parentRefs:
     - name: payment-secure
     hostnames:
       - payment-secure.mcw.svc.cluster.local
       - payment.secure.svc.cluster.local
     rules:
      - matches: [ method: GET, path: { type: PathPrefix, value: /payment} ]
        filter: { urlRewrite: { hostname: payment.secure.svc.cluster.local }}
        backendRefs: 
          - name: mc-wan-cluster-1-target
            namespace: mc-wan
            port: 31111
            weight: 1
      - matches: [ path: { type: PathPrefix, value: /stats } ]
        filter: { urlRewrite: { hostname: payment.secure.svc.cluster.local }}
        backendRefs:
          - name: mc-wan-cluster-1-target
            namespace: mc-wan
            port: 31112
            weight: 1
  #+END_SRC

* TODO

- the plan is now to configure the gateways manually to play with the idea
- iterate on the CRDs and the mechanics
- and finally write an actual Kubernetes operator to automate this: this will be a *massive*
  undertaking
